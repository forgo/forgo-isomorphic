plugins {
    // https://plugins.gradle.org/plugin/io.forgo.keystoreplugin
    id "io.forgo.keystoreplugin" version "1.0"
}

group 'io.forgo.isomorphic'
version '1.0.0'

defaultTasks 'run'

ext {
    // dependency versioning
    sparkJavaVersion = '2.7.2'
    sparkPac4jVersion = '2.3.0'
    sparkTemplateVelocityVersion = '2.7.1'
    junitVersion = '4.12'
    logbackVersion = '1.2.1'
    snakeYmlVersion = '1.23'

    // keystore file
    keystoreOutputDir = ".keystore"
    keystoreFile = "keystore.jks"
    keystorePassword = "password"
    keystoreAlias = "debug"

    /* -- build and environment-specific parameters -- */

    // production builds look for this environment variable
    def PRODUCTION = Boolean.valueOf(System.getenv("IO_FORGO_ISOMORPHIC")=="production")

    // local runs (for IDE debug configuration)
    // - to enable, pass `-Ddebug.local=true` to `gradle run`
    def DEBUG_LOCAL = Boolean.valueOf(System.getProperty("debug.local"))

    summary = "Project to bootstrap an isomorphic app with FuseBox and React"
    vendor = "forgo.io"
    buildDate = "${new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))}"
    port = DEBUG_LOCAL ? '4567' : '7713'

    keystoreFileLocalPath = "${keystoreOutputDir}/${keystoreFile}"
    if(PRODUCTION) {
        // TODO: prod should use an actual keystore not generated by plugin
        keystoreFileLocalPath = "${keystoreOutputDir}/${keystoreFile}"
    }

    // for docker images, the keystore file path is /etc/keystore.jks
    keystoreFileDockerPath = "/etc/${keystoreFile}"

    // app YML config pre-processes w/this to find local keystore for non-docker runs
    keystoreFileResolved = DEBUG_LOCAL ? "${keystoreFileLocalPath}" : "${keystoreFileDockerPath}"
}

// URL for the source code under version control from which this container image was built.
ext.getVcsUrl = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        ignoreExitValue = true
        workingDir '.'
        executable = 'git'
        args = ['config', '--get', 'remote.origin.url']
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Identifier for the version of the source code from which this image was built.
// For example if the version control system is git this is the SHA.
ext.getVcsRef = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        ignoreExitValue = true
        workingDir '.'
        executable = 'git'
        args = ['rev-parse', '--short', 'HEAD']
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// keystore plugin readme:
// https://github.com/forgo/keystore-gradle-plugin/blob/master/README.md
keystore {
    outputDir = "${project.keystoreOutputDir}"

    keyFile = "debug.key"
    keyPassword = "${project.keystorePassword}"

    certFile = "debug.crt"

    pkcs12File = "keystore.pkcs12"
    pkcs12Password = "${project.keystorePassword}"

    jksFile = "${project.keystoreFile}"
    jksPassword = "${project.keystorePassword}"
    alias = "${project.keystoreAlias}"
}

// generate fresh keystore for builds
// build.dependsOn(jks)

repositories {
    mavenCentral()
}

dependencies {
}

// task buildDocker(dependsOn: build) {
//     doLast {
//         def vcsUrl = project.getVcsUrl()
//         def vcsRef = project.getVcsRef()
//         exec {
//             ignoreExitValue = true
//             workingDir '.'
//             executable = 'docker'
//             args = [
//                 'build',
//                 '--build-arg', "NAME=${project.name}",
//                 '--build-arg', "DESCRIPTION=${project.summary}",
//                 '--build-arg', "VERSION=${version}",
//                 '--build-arg', "BUILD_DATE=${project.buildDate}",
//                 '--build-arg', "VENDOR=${project.vendor}",
//                 '--build-arg', "VCS_URL=${vcsUrl}",
//                 '--build-arg', "VCS_REF=${vcsRef}",
//                 '--build-arg', "PORT=${project.port}",
//                 '--build-arg', "KEYSTORE_SRC=${project.keystoreFileLocalPath}",
//                 '--build-arg', "KEYSTORE_DST=${project.keystoreFileDockerPath}",
//                 '-t', "${project.name}:${version}",
//                 '.'
//             ]
//         }
//     }
// }
//
// task runDocker(dependsOn: buildDocker) {
//     doLast {
//         exec {
//             ignoreExitValue = true
//             workingDir '.'
//             executable = 'docker'
//             args = [
//                 'run',
//                 '--rm',
//                 '--name', "${project.name}",
//                 '-p', "${project.port}:${project.port}",
//                 "${project.name}:${version}"
//             ]
//         }
//     }
// }
